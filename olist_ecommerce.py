# -*- coding: utf-8 -*-
"""Olist_ecommerce.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ONm7FeYOHR0-1THRtAxx2JBX31vzXgd_
"""

import pandas as pd

# Spécifiez le séparateur de colonnes personnalisé en tant qu'expression régulière
separateur = r"\s*;\s*"

# Chargez le fichier CSV en utilisant le séparateur personnalisé
df = pd.read_csv("olist_closed_deals_dataset1-210705-162817.csv", sep=separateur, engine='python')
df

import pandas as pd
import matplotlib.pyplot as plt

# Charger votre DataFrame contenant les informations sur les clients
# Supposons que votre DataFrame se nomme df
# Remplacez "votre_dataframe.csv" par le chemin réel vers votre fichier CSV si vous utilisez un fichier externe
# Exemple : df = pd.read_csv("votre_dataframe.csv")
# df = ...

# Créer un histogramme du nombre de clients par type
plt.figure(figsize=(10, 6))
df['lead_type'].value_counts().plot(kind='bar', color='skyblue')
plt.title('Type de clients')
plt.xlabel('Type de lead')
plt.ylabel('Nombre de clients')
plt.xticks(rotation=45)
plt.tight_layout()

# Afficher l'histogramme
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Charger votre DataFrame contenant les informations sur les achats
# Supposons que votre DataFrame se nomme df
# Remplacez "votre_dataframe.csv" par le chemin réel vers votre fichier CSV si vous utilisez un fichier externe
# Exemple : df = pd.read_csv("votre_dataframe.csv")
# df = ...

# Créer un histogramme du nombre d'achats par type de segment commercial
plt.figure(figsize=(14, 6))
df['business_segment'].value_counts().plot(kind='bar', color='salmon')
plt.title('Nombre d\'achats par catégorie de produits')
plt.xlabel('Catégorie de produits')
plt.ylabel('Nombre d\'achats')
plt.xticks(rotation=45)
plt.tight_layout()

# Afficher l'histogramme
plt.show()

# Grouper les données par type de lead et calculer la somme des revenus mensuels déclarés pour chaque groupe
revenu_par_type = df.groupby('lead_type')['declared_monthly_revenue'].sum()

# Trouver le type de lead avec le revenu total le plus élevé
type_max_revenu = revenu_par_type.idxmax()
revenu_max = revenu_par_type.max()

print("Le type de client qui apporte le plus de revenu est '{}' avec un revenu total de {}.".format(type_max_revenu, revenu_max))

# Grouper les données par type de lead et calculer la somme des revenus mensuels déclarés pour chaque groupe
revenu_par_type = df.groupby('lead_type')['declared_monthly_revenue'].sum()

# Créer un graphique à barres pour visualiser les revenus par type de lead
plt.figure(figsize=(10, 6))
revenu_par_type.plot(kind='bar', color='skyblue')
plt.title('CA par type de client')
plt.xlabel('Type de client')
plt.ylabel('CA')
plt.xticks(rotation=45)
plt.tight_layout()

# Afficher le graphique
plt.show()

# Calculer la taille moyenne du catalogue de produits déclarée pour chaque segment commercial
mean_catalog_size = df.groupby('business_segment')['declared_product_catalog_size'].mean()

# Créer un graphique à barres pour visualiser la taille moyenne des produits par catégorie
plt.figure(figsize=(18, 6))
mean_catalog_size.plot(kind='bar', color='orange')
plt.title('Taille moyenne des produits par catégorie')
plt.xlabel('Catégorie')
plt.ylabel('Taille moyenne des produits')
plt.xticks(rotation=45)
plt.tight_layout()

# Afficher le graphique
plt.show()